# exam에서 english가 80점 이하인 경우만 출력
exam %>%filter(english <= 80)
# 여러 조건 (&)을 사용해서 나열
# 1반이면서 수학 점수가 50점 이상인 경우
exam %>% filter(class == 1 & math >= 50)
# 영어 점수가 90점 미만이거나 과학 점수가 50점 미만인 경우
exam %>% filter(english < 90 | science < 50)
# math만 추출
exam %>% select(math)
# class, math, english
exam %>% select(class | math | english)
# class, math, english
exam %>% select(class , math , english)
# science만 제외
exam %>% select(!= science)
# science만 제외
exam %>% select(-science)
# class가 1인 행만 추출한 다음 english 추출
exam %>% select(english,filter(class == 1))
# class가 1인 행만 추출한 다음 english 추출
exam %>% select(english(filter(class == 1)))
# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(exam %>% select(english))
# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class == 1) %>% select(english)
# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class == 1) %>% select(class,english)
# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class == 1) %>% select(english)
# class가 1인 행만 추출한 다음 english 추출
exam  %>% select(english)%>% filter(class == 1)
# id,math 앞에서 6행까지 추출
exam %>%
select(id,math) %>%
head
# math 오름차순 정렬
exam %>%
arrange(math)
# math 내림차순 정렬
exam %>%
arrange(desc(math))
# class 및 math 오름차순
exam %>%
arrange(class,math)
# 총합 변수 추가
exam %>%
mutate(total = math + english + science,
mean = (math + english + science)/3) %>%
head
# 과학 점수가 60점 이상이면 pass, 그렇지 않으면 fail
exam %>%
mutate(ifelse(science >= 60,"pass","fail")) %>%
head
# 과학 점수가 60점 이상이면 pass, 그렇지 않으면 fail
exam %>%
mutate(test = ifelse(science >= 60,"pass","fail")) %>%
head
# 종합 점수를 계산하고 총합점수 순으로 정렬
exam %>%
mutate(total = math + english + science) %>%
head
# 종합 점수를 계산하고 총합점수 순으로 정렬
exam %>%
mutate(total = math + english + science) %>%
arrange(total)
# 종합 점수를 계산하고 총합점수 순으로 정렬
exam %>%
mutate(total = math + english + science) %>%
arrange(desc(total))
# 종합 점수를 계산하고 총합점수 순으로 정렬
exam %>%
mutate(total = math + english + science) %>%
arrange(desc(total)) %>%
head
# 종합 점수를 계산하고 총합점수 순으로 정렬
exam %>%
mutate(total = math + english + science) %>%
arrange(desc(total))
# 집단별 요약
exam %>%
summarise(mean_math = mean(math))
# class별로 분리 // math 평균 산출
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math))
# class별로 분리
# math 평균
# math 합계
# math 중앙값
# 학생 수
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math)) %>%
summarise(sum_math = sum(math))
# class별로 분리
# math 평균
# math 합계
# math 중앙값
# 학생 수
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math),
sum_math = sum(math),
median_math = median(math),
n = n())
# dplyr 패키지 응용
# mpg에 대해
# 1. 회사별 분류
mpg %>%
arrange()
# dplyr 패키지 응용
# mpg에 대해
library(ggplot2)
# 1. 회사별 분류
mpg %>%
arrange()
# 1. 회사별 분류
mpg %>%
arrange(manufacturer)
# 2. suv 추출
mpg %>%
select(model == suv)
# 2. suv 추출
mpg %>%
select(model == "suv")
select(model)
# 1. 회사별 분류
# 2. suv 추출
# 3. 통합 연비 변수 생성
# 4. 통합 연비 평균 산출
# 5. 내림차순 정렬
# 6. 1~5까지 출력
mpg %>%
group_by(manufacturer) %>%
filter(class = "suv") %>%
mutate(tot=(cty+hwy)/2) %>%
summarise(mean_tot = mean(tot))
# 1. 회사별 분류
# 2. suv 추출
# 3. 통합 연비 변수 생성
# 4. 통합 연비 평균 산출
# 5. 내림차순 정렬
# 6. 1~5까지 출력
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(tot=(cty+hwy)/2) %>%
summarise(mean_tot = mean(tot))
# 1. 회사별 분류
# 2. suv 추출
# 3. 통합 연비 변수 생성
# 4. 통합 연비 평균 산출
# 5. 내림차순 정렬
# 6. 1~5까지 출력
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(tot=(cty+hwy)/2) %>%
summarise(mean_tot = mean(tot)) %>%
arrange(desc(mean_tot)) %>%
head(5)
# 1. 회사별 분류
# 2. suv 추출
# 3. 통합 연비 변수 생성
# 4. 통합 연비 평균 산출
# 5. 내림차순 정렬
# 6. 1~5까지 출력
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(tot=(cty+hwy)/2) %>%
summarise(mean_tot = mean(tot)) %>%
arrange(desc(mean_tot)) %>%
head(7)
# 데이터 합치기(가로/세로)
# 중간고사
test1 <- data.frame(id=c(1,2,3,4,5),
midterm=c(60,80,70,90,85))
# 기말고사
test2 <- data.frame(id=c(1,2,3,4,5),
final=c(70,83,65,95,80))
test1
test2
# 합치기
total <- left_join(test1, test2, by="id")
total
# 반 별 담임 교사
name <-  data.frame(class = c(1,2),
teacher = c("kim","lee"))
name
exem_new <- left_join(exem, name, by="class")
exem_new <- left_join(exem, name, by="class")
exam_new <- left_join(exam, name, by="class")
exam_new
group_a
group_a <- data.frame(id = c(1,2,3,4,5),
test = c(60,80,70,90,85))
group_a
group_b <- data.frame(id = c(6,7,8,9,10),
test = c(70,83,65,95,80))
group_b
group_all <- bind_rows(group_a,group_b)
group_all
df <- data.frame(sec=c("M","F",NA,"M","F"),
score=c(5,4,3,4,NA))
df
# 결측치 확인
is.na(df)
df <- data.frame(sex=c("M","F",NA,"M","F"),
score=c(5,4,3,4,NA))
df
# 결측치 확인
is.na(df)
# 결측치 빈도 출력
table(is.na(df))
# 필드별 결측치 개수 확인
table(is.na(df$sex))
table(is.na(df$score))
# 필드에 결측치가 존재하면 계산이 안 됨
mean(df$score)
sum(df$score)
library(dplyr)
df %>% filter(is.na(score))
# score 결측치 제거
df %>% filter(!is.na(score))
# score 결측치 제거된 내용 저장
df_nomiss <- df %>% filter(!is.na(score))
df_nomiss
sum(df_nomiss)
sum(df_nomiss$score)
# 현재의 데이터에 존재하는 모든 결측치 제거
df_nomiss <- df %>% filter(!is.na(sex) & !is.na(score))
df_nomiss
# 결측치가 하나라도 있으면 제거
df_nomiss2 <- na.omit(df)
df_nomiss2
# 결측치를 제거하지 않고 계산
mean(df$score, na.rm = T)
sum(df$score, na.rm = T)
exam <- read.csv("data/csv/exam.csv")
exam <- read.csv("data/exam.csv")
exam <- read.csv("data/exama.csv")
exam
# 결측치 생성- 3,7행에 대한 수학 결측으로 처리
exam[c(3,7),"math"] <- NA
exam
# 결측치 생성- 3,7행에 대한 수학 결측으로 처리
exam[c(3,5,7),"math"] <- NA
exam
exam <- summarise(mean_math = mena(math))
exam <- summarise(mean_math = mean(math))
# math 평균 (결측치를 제거하고 계산)
exam <- summarise(mean_math = mean(math, na.rm = T))
library(dplyr)
# math 평균 (결측치를 제거하고 계산)
exam <- summarise(mean_math = mean(math, na.rm = T))
library(ggplot2)
# math 평균 (결측치로 인해 계산 불가)
exam <- summarise(mean_math = mean(math))
# math 평균 (결측치로 인해 계산 불가)
exam  %>%  summarise(mean_math = mean(math))
# math 평균 (결측치를 제거하고 계산)
exam %>% summarise(mean_math = mean(math, na.rm = T))
#-----
# 결측치 대체
mean(exam$math,na.rm = T)
exam$math
exam$math <- ifelse(is.na(exam$math),54.2,exam$math)
table(is.na(exam$math))
exam$math # 결측치 확인
mean(exam$math)
# 이상치
outliner <- data.frame(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
outliner
# 이상치 확인 -> 분류
table(outliner$sex)
table(outliner$score)
# 이상치를 결측치로 변환
# sex 3일경우 NA, score 5보다 클 경우 NA
outliner$sex <- ifelse(outliner == 3,NA,outliner)
outliner
# 이상치를 결측치로 변환
# sex 3일경우 NA, score 5보다 클 경우 NA
outliner$sex <- ifelse(outliner == 3,NA,outliner$sex)
outliner
# 이상치
outliner <- data.frame(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
# 이상치를 결측치로 변환
# sex 3일경우 NA, score 5보다 클 경우 NA
outliner$sex <- ifelse(outliner == 3,NA,outliner$sex)
outliner
# 이상치
outliner <- data.frame(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
outliner
# 이상치를 결측치로 변환
# sex 3일경우 NA, score 5보다 클 경우 NA
outliner$sex <- ifelse(outliner$sex == 3,NA,outliner$sex)
outliner
outliner$score <- ifelse(outliner$score > 5,NA,outliner$score)
outliner
# 결측치를 제외한 후 성별에 따른 score 평균 구함
outliner %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex)
# 결측치를 제외한 후 성별에 따른 score 평균 구함
outliner %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
# 12~37을 벗어난 이상치에 대해서 결측치로 변환
dim(mpg)
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37 , NA,mpg$hwy)
table(is.na(mpg$hwy))
# 12~37을 벗어난 이상치에 대해서 결측치로 변환
dim(mpg)
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
# 12~37을 벗어난 이상치에 대해서 결측치로 변환
dim(mpg)
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37 , NA, mpg$hwy)
table(is.na(mpg$hwy))
view(mpg)
views(mpg)
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
library(ggplot2)
library(dplyr)
library(ggplot2)
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
boxplot(mpg$hwy)
library(dplyr)
library(ggplot2)
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
# 12~37을 벗어난 이상치에 대해서 결측치로 변환
View(mpg)
temp <- mpg
View(temp)
temp$hwy <- ifelse(temp$hwy < 12 | temp$hwy > 37 , NA,temp$hwy)
table(is.na(temp$hwy))
View(temp)
# 데이터 분석 시각화
# 산점도
# x축은 displ, y축은 hwy로 지정해 배경 생성
ggplot(data=mpg; aes(x=displ, y=hmy))
# 데이터 분석 시각화
# 산점도
# x축은 displ, y축은 hwy로 지정해 배경 생성
ggplot(data=mpg aes(x=displ, y=hmy))
# 데이터 분석 시각화
# 산점도
# x축은 displ, y축은 hwy로 지정해 배경 생성
ggplot(data=mpg : aes(x=displ, y=hmy))
# 데이터 분석 시각화
# 산점도
# x축은 displ, y축은 hwy로 지정해 배경 생성
ggplot(data=mpg, aes(x=displ, y=hmy))
# 데이터 분석 시각화
# 산점도
# x축은 displ, y축은 hwy로 지정해 배경 생성
ggplot(data=mpg, aes(x=displ, y=hwy))
# 배경에 산점도 추가
ggplot(data=mpg, aes(x=displ, y=hwy))+geom_point()
# x축 범위 3~6으로 지정
ggplot(data=mpg, aes(x=displ, y=hwy))+geom_point()+xlim(3,6)
# 배경에 산점도 추가
ggplot(data=mpg, aes(x=displ, y=hwy))+geom_point()
# x축 범위 3~6으로 지정
ggplot(data=mpg, aes(x=displ, y=hwy))+geom_point()+xlim(3,6)
# y축 범위 10~30으로 지정
ggplot(data=mpg, aes(x=displ, y=hwy))+geom_point()+xlim(3,6)+ylim(10,30)
rm(mpg)
df_mpg <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
df_mpg
ggplot(data=df_mpg, aes(x=drv,y=mean_hwy))+geom_col
ggplot(data=df_mpg, aes(x=drv,y=mean_hwy))+geom_col()
# 데이터 분석 시각화
library(dplyr)
library(ggplot2)
ggplot(data=df_mpg, aes(x=drv,y=mean_hwy))+geom_col()
# 크기 순으로 정렬
ggplot(data=df_mpg, aes(x=reorder(drv,-mean_hwy) y=mean_hwy))+geom_col()
# 크기 순으로 정렬
ggplot(data=df_mpg, aes(x=reorder(drv,-mean_hwy), y=mean_hwy))+geom_col()
# 시간의 흐름에 따라 나타나는 그래프 - 선 그래프
# 일정 시간 간격을 두고 나열된 데이터 - 시계열 데이터
ggplot(data=economics, aes(x=date,y=unemploy))+geom_line()
# 상자 그림 만들기 - Boxplot
ggplot(data= mpg, aes(x= drv, y= hmy))+geom_boxplot()
# 상자 그림 만들기 - Boxplot
ggplot(data= mpg, aes(x= drv, y= hwy))+geom_boxplot()
